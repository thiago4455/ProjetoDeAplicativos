<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picLogo.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAJAAAAAsCAYAAACKTjG2AAAABGdBTUEAALGPC/xhBQAAABl0RVh0U29m
        dHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAABS1SURBVHhe7ZwJeBVFuoZ/IGFRDDuKoKKIghtLlD2b
        CMgMo85VUMcRkX01LAHE8YJ3UGEUhyvIKtkDhJ1AQEJ2SEDccHRQERHcR8UFdxml7/d1d5FKpc4JIDKJ
        l/M873O6/1r6nKqv//qrepGn34osRcan0RK3ravI6PYiE8JFJh4XtcFU8Ab4CrwIHgTVgC1/cOKuFbmv
        g8jqpiLPhYlsqyoXbr1GVievkvSUdElNTf1/wdbELfLAymn4/9VF8uuJbAf5DUSmtvHax9Z2p5tfKKCz
        QT/wLnAsvAZaAlvZwJwRkMtvXUDNwX5gE47OIdAG2Oqwc0ZALr9lAd0IvgY2wQSiLbDVVZYzAnKplALK
        /CxaRud2ERnWzl5gYnh3YBNIefwArgG2Og0goFEdRVY0E3n+nDMCqkwCWv5+lDy5J0JCmTisjBdqBo4A
        m0COh49ATaDXWRbVOFsaixTXPSOgyiSgRfsi5ZnPo2VwFrzQEHihERDRPfiOxffk8D+gkE0YweBQxzhI
        7c8GZX/IJBAHRnYSGYxjz7hS5Nk6IgVosDMCqjwCWgwS346U1HejZObLERKb11VuS+8kIfcj89B2tSGi
        QhRUYvhC2w7Eq+Af2n4mKP0jKJ4JGLaGdxaZ3Uoko4lIbkM0XH2vwc4IqPIIiNALJUBEqz6KcoPqnUdi
        5G8QUyi90HDXE9GLUAyr/O9gZIHn/O3vQAtQ8gMonvEQz1B4nfktRXbXFnkBcQ8bKw8iOiOgSiOggWCa
        tn+MRW9GSvbhaJm+O0Kqj0UhCmli+CzQGXwPTNHocIGR60R7wdWg5OBKPEMgngWXeuJxhYNGYkMptolc
        knWtbEzKkGUpy6yN/VuksgnoDeCAiZqN1AQUVpvcr6OlSwJilEGlZmgJwCYc8iGoAaJB6VVpNWwp8bwU
        QDyugEKlcXZLWZW8El5otbWxQWMwHqwGC8HVwJbPpKrF9nvwDFgFOvu2F8A4f/u0UJkE1Aj8ACign0Bf
        cA3oA94FtDfejOB6+NaujIW8gNerZAywiYd8BmqB0gclLD8GjbCQ4lFDliEcnSKRgWtHSVF8oSSnJtsa
        vD9wwEZQ5G/fCmx5yVCwxbCRyYBlmbYbxALaaZvvb58WKpOAuvsiCQTT3XhoDILqKiMxhJVM7zcAm3gU
        u0Dpg5Jx1yGWQj0FCJR3YrYVTDz5iIW2h0i9nOayBh5odcoqW4MPBOxktX8QfO5vtwNLwQx//xLAvGQO
        aARUOdr2aPuEXuobMBc8Ch4BenoEWAFmgxq+rSe4BdwAVoK7gV6mXCigh9NnQkA10AYVW0A3+kKxQY90
        HpCsL6NlQCaGnJIh7DJgE41JETgHlBxYCSjLX+spIxoLxSL3rBsuRQkFNi+kPFBdwOGM24sBhzJ2/l/B
        y4Ad3Rp8An4C+eB8oOqhQFh2DbjKt1FAHwIKkp6J6RmAaYP8fXq+Q2AfoP0BQHsBKPS3pwB1nKAkpiXJ
        c0t2yOjVE+F9q+D/40SrwAKKAjbxKB5csj9S1n0SJZ2f7uitD3kVPA5sgrHBK/VhwCurBKQWC02xlIHT
        +lAJy70IHoixUBkvxLOdnbQfHAbPA9opkE9BFKCHYB7aHwaf+dsmw8H3gHnv8G3cTvO35/n71f1vNRTS
        +3C/H7jZ3z4XMG29vx/i7wckCeLJS8iWxNQUqZvXBP+7ptcGFVhA12tisRHHaX36B1HS/DF0PGMgr4J/
        AptYArEbeGXHop4pqCcHwijyG8ajq7YdAmqX7DMvvdAw2R6fL8lpKXrD3wnYQWNBtG8jX4IDIAGkAHY+
        O5FiCCQgxWbAOikUerHpgPb/Bl+BOoDpumfh/jSgPKKyT/L31RBnheLJT8iR5JRUqZN3HkQjGN5xkvH/
        V2ABTdDEYnIENFwO8biXOKZg5hTrFq4PvgU2oQRjMfBmYLEQ0XqcYbxg6onkMuCAV/z934OPQGtvn14o
        RGrnXugOYYYXGgbYQaGajWSBI6AJYOc1ALSvA8zP+KiabyOspxdoARgLUYAUHPNydsc8jJu4XwVwdvYz
        YP1DAO2XA+WBGKy3BMzzJlDHKUUKvA15Nr4InofiOdc9WY6Jh1RgAW33xWLyDbgFSOahaOm/EfFPyfB1
        AShvDSgQfdxpPBcP57UUeRGzMC+I/iOggMhUMMvfXga8xitA3oLaMmfpXMlM3KB3Ql/wMWim2cjZIA8w
        fvkAMJimvS34AtCTKFGRXMCO/xq8AS4DtDNmesjf/ou/z20G4Iyt3gccOhn70M4lhW/BLsC8e4H521wo
        nGWpS6UgIVemrXhYwvIhGlc8jUrEQyqogDiFZ6BsE9Aq4IqMU/h+azuL3NVWFW4KuLJsE0hgJl1HPpY4
        xD9jEE89iPpKGucmoAT0A/jC334TVAHIg3zbq8rw1eNkW0KeHkzTi5wF6BVKdZDPpYBBse6hwgAFYq4F
        saNbczhZm7xG1ietl1UpK2thBhi6AdtpqWmh6PRaRplwoOIdouIt5rvSt7lgHHW/6UG5rsVj7IzfLiPX
        jHcnCqWGLZ0KKqBbfbHY+AjUAZJ4wLu00XoOfvi9rhdqDE7gnqBrHbm/kyMDGjpyd5gTOrnjWIlDXbEQ
        USbG+ucwlc9vcBVQAtJ5C/gC4pS+Cqb0F7tTei4u6p3jdVCKLE9ZLktxVnPbTC8PlqEwtyY+I0+nJcjc
        ZXNce0LaEpm9bK5sTNrg1l9O3Wo2d0zQzL80NU22oN4cxDncT0L9GRDlsDX3eV6nkAGz4XkUFVRAs3yx
        BOIlcD4vZ6z5V5QkHYyUWrywOqxddQxDXGm2iMXC5I6ODGnq3PTUPU58cbrTeGrUv2VMq7oyAl5tcQs1
        jIWigT4BpoAygNaYaEg09qSVU+WFJTvRCZ4XYqcvT1kmuQlbXa+RhY7KTsySlZi1wWugw8p0slsmHWLY
        mpDlXipJwn5G8nrZsaQIgkmSJjktJLQgTOpCsLXzmkq1wloyfO1o2RG/TYoRr2RCTKzDIqaGoBVwvRu9
        GfNmY3b1VwxTMZt6Sf3c5phVNsXJcAmEUwOcjf8WQDykggooVxNLIA6DcYv2RdahF5q3N1JqP4DCo9pv
        hYjsgjEZ2cKpF9fGUR+JvdyR0S2fcgNp/hA2zA53Or8EmALaAEoakl6o8CzECg1l9vIn5eWnn5dCDGfF
        8YWyKWmjxK2aLFdsbSsRm3rIVIhsBQUCMW1LyHfjDB2WWZ+8VsatGSsz0x9395PTEuXOjD9LSAF+D4cT
        xFxeB9fyVoURyHfc3F36bewr0yEGBr7b4wskN3ErxJvteqhlqd41OwqXnpAzq6X4HTGbe3p1cqgqRF2s
        k3XzWPxfpf6nQQUV0DuaUMrj0OJ9kfOyD8dEP/RCN5E/tVkpw9thaLIIRodDV78Qp8fCoa54joI7UyZg
        KKtzFPEQvFAnkSU4CzkbK3BnYkeBLqBvQUdQ0piMEdARIfnnSn9M6+9aN9id3l+xBXVxKGAn8XtbVTkP
        Z3gniKn/uqFy+/oBx7hz/b2urWUWZoTo0Jp550t0Zh85i9Nnt4O5AtyIQ+cQMAdMx/7Fku8LaweAuPps
        6CcD1g2RwfBMg9aOkMeWPwEReR4wK3Gz5CRukRkQZxhnVqwXHi2opwlEBRXQd4ZIyiX+7Ugn49PovYM2
        d/myVmx7R+5tG1xEEyCyO6o7m/cUuALiZ9bWBbDVwNDW4RH3mhivjXEm5q0JDQC6gBTzQRPgNSRFBE/k
        CkWB+MhdtT12NqO+baElgrIBkbl5OYRwn16hxBvMA/pvYGBfD+D4EAG9E8uo4JcU1JFWWe2k26beEpHZ
        W66kQF3vVc0r49V74vwGPJAL4iEnfn+kU/h9jLP8gyin9f9AJHcHENEDXRy5VZy7Uyf50vE+fRaMdeS2
        eo6M7fSdDOpaQx67QmQX70B0byJrBPRO03kXcIGxdOP+enAdyvwNEcCSl78dcKlBiemYqE7S6+j85wTE
        e9n/C/QEt4LWwEuDIP5uCuR4mf8GPNGhaGfL4RjnkocwyxpgiGgKxNO3mnPptAhfNt5n15u7nZBRTZG3
        lSPjkG9qmzHuGc8YKK9BVTTSSmB2ms4gULaBfx1WA/P4JV7wdPKfE1Ax0B2DtxhMIIQmpjBOhPl7I52N
        EFHK+1FOTQ5nI8H9HTBsQUy3ifO7J25z3v/oW+fTz79x5uxLdf60e7BTJaOuI5uqOFKMzsit70hh/Z+k
        uB4i0IbpaCBO2c0OM/knMBuYsQo9EwXI2ZyyNwORoDOo4dsUKi/L6mWagutBS1ATTAQcyhADNWgFmKca
        UMfjNlHlm4PugJ5Kt5MOoAe4WrPZaAduANGghWvj8M5bfXkJKNYVEO+xIiHHOtR7SrgriADn+rZAnAU6
        AXoWlmkEbPleArqAHgZeGkRAypvKB2UePNE2DGcjcrp6Q9n4a5wGY1s5qTnJTu5zrzhd5vd2qmY2cmSj
        QDigoLojOxpTOA4axcGZ5cDz2IQSjGFAb3A29jvgAHgPPAGmgSNAlXkfjACqzB2AQyLL8DsBTAFcxGT+
        /oBCSAKJgOlzActeB9TxDoJ/gCiQAn4G6pj7wSWAIt7j2xQrgC5cMhmwjJ6PFKG9ergXnh+9ig8fNEAH
        7gEHwTuAt9WMAh8D1dHfgPnAFATv0XoK8CkZXRh8LD0d8Okb5rsd8B54c8H4bbAFpCsB1QCfKUGcDAmI
        ibK+inFaPH4dguOLnLYz+jqLn8l0QubC22RDNMXVIBw2REOzYU6WmUBv+L7Als8GRcEyGDqt6YpugCI0
        7SxL72LaA8FZpM1ORgP1Hxb4Njs8yV48p7esuIACOk/r0PL4G1DiqQ5eAbZ8in8B5h2t2eyg8xWDlRhO
        hoUIrHO+jnbGFcIL3YN4aGBHR2ZDOK9gqCqCt8k9ZcIhOSAMqIYn+mWQ8ngGsEyg2Z6Cw959hu0zwLJM
        0+0nSxpgfZ00W2B21D3k3kM1uX1NGXsdPYa9Y0vzM+B7DCgKDj+2PCY3gdsMm8lXuoCIun31pEg9GOmk
        fBDpnDO621GZ1dyR12riT59S4XwI/gCUaHRsAnodZBo2wnpYpjyv1RaYXqo8AX1lsSm+sdg4PLI+LlGY
        aYy5SgfxBRj2i+u2lkcwjI3qaAroS8DHpvit20k7QAHxNmPdzrwc/swyfOKmC8jVbIrXwRowyxTQCArh
        ZJn3ZoRT8EmvozdlhB+VzTXgefBnTzy2Cca9QAnGxCYgNVTRY+l2xii083YR3U6WgmtBe8D45O9ATw8m
        IHZ4Q7BdsxEOYZf6mIukHLZY37OajbwAaOeaU4mdcWNx3QHyMAQ0uoyAFgCKxHafOoNkPuBg2v8IWKaH
        ZiMHAO2hmk3xAGDasSBacQ444YVFRcJbUc66gz2dK15uAuGcdaqHLcJZERvVhk1AfQDTZmg2BWdeNxo2
        cg3Q610M9PRgAroFMI3X7nT7x0DV95NvU/wvoN2cfarLN+eCkjLexCNOpl9NAZleY67bqRPDb9BsikjA
        V+2Y9ungZsDHr3Q7H8NiXU00m2IGsAqI5AGrQIKxCGS/28sZ8ipmYVnwPqd26CKcwahOsGETEO8vYtqj
        mk3B6Xcvw0Y4W9LrNYeWYAIaCJi2RbORQ4D2ukCfoZHZgGmczen2zYD2xuA736YENDmAgBa6neo9RqXb
        CW0dDFsweLcp67pIsylmgoACWggoCt4jtNffPi42QUCX77wAAqqFP3vKBcR4hA0aiBMVEO02DxQD9HpP
        l4De1myEsRvt9EA/+rbyPJASUIxmU3QDVxg2cliDj6oTvkllOWBdNq8VVEBpgIKYA6qDH/39oKx8O8aZ
        uy/CqZqPP5iLqXvpxvglHAaMVdiYwbAJSHkTdWej4t+Adg5xup2cbgFxgZJpL2s2ojyQLQYaGCAG4tPC
        gQTEBUMuHJr24YBlqvrfCublNy9bmGUmAy8fOt/kQ0BRtARn+9tB4fC15Z0ezpTXOziSXVtvhF8KZyjn
        AzZkedgENBRcBF7VbOQDwDK2WdjpFhBvX2EaFxV1O2eKXDnnRKDEzrW0nXXC3beXjOpkCogzowvBPM2m
        UO9mMr0WL1Pw/namcRWbsdK9/j65Euj5CWdtvDbWxxTPnykIQK/D/TDwqW8LSOL+KGfFge5O8x3NTqWA
        1Jl5vNgERMwOI+rstq0DnW4BcXWbabdrNgVXzr8uZSuqd8R9kuUvbUMktoNtHYhrPqaN964rj8Lhx0z/
        CfB1hfxWNvUcXyvNZvKKEs4wUAj4BAZFsR7QXh+oR54DkgQBpR+4wanJs4PxT8Fxxz9szDWA8Q3Xd/S0
        +4F/G+txEUhANhg8sww9lJnGa2B6vYuAns51Htq7aDbFYMA0c9mAwzDtFJBuJ7z0oY6127cF5vmwCbKq
        GYevRhLnXnqwdawJL1soj8IXfB3Puy2Vx+IC5I++zWSTEhBfqKAE8SpoBWhvAXYCJSwrHMI2cgh7Ldyp
        kX02pvD17H/ejj7rSfVtOiOBSg+GKSCut9i8z5NAlbFdymBgrdfLlWIzD+287mXa1WWJXZpNQXt9w0Z4
        AqljcXXdFF8JeQ1mum8wWdSC71LiPemmgGwPOWwD5lvhGoIcYOZVmK8jnABs+bKVgMjFPrpNwUeb2wM+
        I98b8KULhNu0xSx4q1v34vdu7Nl/z7W9JbfeLYCLfuMBPQkvUBJux4GxgHf5DQccClQDEj7Ow8d4uKDH
        oYAXPPX0QNgEFAvuBk+BhwA7XS9zAaDno0ciDKq5EKjnuRLcDHqC3wG1OEkxMD/LMY3HZ31M40Ik6zXL
        cGGSAiWqjLnuRHgNjhdVHwdcw6IwL3MvpBbW955kua8Dr5ybAloCegG+v4lDFe/d0YVjwnhnCmDw/SiI
        A3yBKsVp5r0eTAPMy7Wj8SDcJpaTYsFbEZJ98AYZubeLuC+GyuU9vmUa5tfENoSpaXzlh3dr8hU48ReL
        DO0sMql9IAGZHf/rYhPDybAQAsqCgAa93tH7s6dfQLcCU0DmLR+VF/X4N98n4N1MRi+hi4esBmU7+dfE
        JoaToQIIiEMFA9zPfbh9F7DlrVzwRaO7wrz3Rw6j93E7j3HMe4BeiBdI+a0WEk8T4fJ/OShzvGxaiscA
        AAAASUVORK5CYII=
</value>
  </data>
</root>